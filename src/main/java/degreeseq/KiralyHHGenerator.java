package degreeseq;

import generate.handler.GeneratorHandler;
import generate.handler.IsomorphCountingHandler;
import generate.handler.SystemOutHandler;
import graph.model.Graph;
import graph.model.GraphFileReader;
import graph.model.IntGraph;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KiralyHHGenerator {
    
    private GeneratorHandler handler;
    
    public KiralyHHGenerator() {
        this(new SystemOutHandler());
    }
    
    public KiralyHHGenerator(GeneratorHandler handler) {
        this.handler = handler;
    }
    
    public void generate(int[] degreeSequence) {
        generate(degreeSequence, degreeSequence.length, new IntGraph());
        handler.finish();
    }
    
    public void generate(int[] degreeSequence, final int n, IntGraph g) {
//        System.out.println("recursing " + n + " " + Arrays.toString(degreeSequence) + " " + g);
        int dN = degreeSequence[n - 1];
        KiralyTree tree = new KiralyTree(n - 1, new KiralyTreeListener() {

            @Override
            public void handle(int[] degreeSequence, IntGraph g) {
                generate(degreeSequence, n - 1, new IntGraph(g));
            }
            
        });
        if (n == 3) {
            IntGraph h = tree.connectRemaining(degreeSequence, g);
            if (h != null) {
                handler.handle(g, h);
            }
        } else {
            tree.traverse(degreeSequence, g, n, dN);
        }
    }
    
    public static Map<String, List<IntGraph>> getDegSeqMap(String filename) throws FileNotFoundException {
        Map<String, List<IntGraph>> degreeSeqMap = new HashMap<String, List<IntGraph>>();
        // read the graphs generated by McKay, and group them by degree sequence
        GraphFileReader reader = new GraphFileReader(new FileReader(filename));
        for (IntGraph g : reader) {
            int[] degSeq = g.degreeSequence(true);
            String key = Arrays.toString(degSeq);
            List<IntGraph> graphsWithDegSeq;
            if (degreeSeqMap.containsKey(key)) {
                graphsWithDegSeq = degreeSeqMap.get(key);
            } else {
                graphsWithDegSeq = new ArrayList<IntGraph>();
                degreeSeqMap.put(key, graphsWithDegSeq);
            }
            graphsWithDegSeq.add(g);
        }
        return degreeSeqMap;
    }
    
    public static void reproduce(String filename) throws FileNotFoundException {
        Map<String, List<IntGraph>> degreeSeqMap = getDegSeqMap(filename);
        IsomorphCountingHandler duplicateHandler = new IsomorphCountingHandler(true, false);
        KiralyHHGenerator generator = new KiralyHHGenerator(duplicateHandler);
        for (String degreeSequenceString : degreeSeqMap.keySet()) {
            int[] degreeSequence = parse(degreeSequenceString);
            generator.generate(degreeSequence);
            List<Graph> kiralySet = duplicateHandler.getNonIsomorphicGraphs();
            for (Graph g : kiralySet) {
                System.out.println(g);
            }
        }
    }
    
    private static int[] parse(String degreeSequenceString) {
        int end = degreeSequenceString.indexOf("]");
        String[] bits = degreeSequenceString.substring(1, end).split(","); 
        int[] degSeq = new int[bits.length];
        int i = 0;
        for (String bit : bits) {
            degSeq[i] = Integer.parseInt(bit.trim());
            i++;
        }
        return degSeq;
    }
    
    public static void main(String[] args) throws FileNotFoundException {
        KiralyHHGenerator.reproduce(args[0]);
    }
    
}
