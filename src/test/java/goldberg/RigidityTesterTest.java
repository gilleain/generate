package goldberg;

import graph.model.GraphFileReader;
import graph.model.IntGraph;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;

public class RigidityTesterTest {
    
    public void testFile(String filename) throws FileNotFoundException {
        Map<String, List<IntGraph>> degreeSeqMap = new HashMap<String, List<IntGraph>>(); 
        
        // read the graphs generated by McKay, and group them by degree sequence
        GraphFileReader reader = new GraphFileReader(new FileReader(filename));
        for (IntGraph g : reader) {
            int[] degSeq = g.degreeSequence(true);
            String key = Arrays.toString(degSeq);
            List<IntGraph> graphsWithDegSeq;
            if (degreeSeqMap.containsKey(key)) {
                graphsWithDegSeq = degreeSeqMap.get(key);
            } else {
                graphsWithDegSeq = new ArrayList<IntGraph>();
                degreeSeqMap.put(key, graphsWithDegSeq);
            }
            graphsWithDegSeq.add(g);
        }
        
        int easyCount = 0;
        int hardCount = 0;
        for (String degSeqStr : degreeSeqMap.keySet()) {
            for (IntGraph g : degreeSeqMap.get(degSeqStr)) {
                boolean hasMaxN1 = RigidityTester.hasVertexOfDegreeNMinusOne(g);
                int uniqueVert = RigidityTester.findUniqueMaxVert(g);
                boolean hasUnique = uniqueVert != -1;
                boolean isRigid = false;
                if (hasUnique) {
                    isRigid = RigidityTester.isRigid(g.minus(uniqueVert));
                }
                boolean isEasy = (hasMaxN1 || (hasUnique && isRigid));
                
                System.out.println(degSeqStr + "\t" + 
                        isEasy + "\t" + hasMaxN1 + "\t" + hasUnique + "\t" + isRigid + "\t" + g);
                if (isEasy) {
                    easyCount++;
                } else {
                    hardCount++;
                }
            }
        }
        double fraction = (double) easyCount / ((double) easyCount + hardCount);
        System.out.println(easyCount + "\t" + hardCount + "\t" + fraction);
    }
    
    @Test
    public void testGraphForEasy() {
        IntGraph g = new IntGraph("0:1,0:2,0:3,0:4,1:2,1:5,3:5,5:6,6:7,7:8");
        boolean isEasy = RigidityTester.isEasy(g);
        System.out.println(isEasy);
    }
    
    @Test
    public void testEights() throws FileNotFoundException {
        testFile("output/mckay/eight_x.txt");
    }
    
    @Test
    public void testSevens() throws FileNotFoundException {
        testFile("output/mckay/seven_x.txt");
    }
    
    @Test
    public void testSixes() throws FileNotFoundException {
        testFile("output/mckay/six_x.txt");
    }
    
    @Test
    public void testFives() throws FileNotFoundException {
        testFile("output/mckay/five_x.txt");
    }
    
}
